/*
maestro Service API

maestro Service API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConsumerList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsumerList{}

// ConsumerList struct for ConsumerList
type ConsumerList struct {
	Kind  string     `json:"kind"`
	Page  int32      `json:"page"`
	Size  int32      `json:"size"`
	Total int32      `json:"total"`
	Items []Consumer `json:"items"`
}

// NewConsumerList instantiates a new ConsumerList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerList(kind string, page int32, size int32, total int32, items []Consumer) *ConsumerList {
	this := ConsumerList{}
	this.Kind = kind
	this.Page = page
	this.Size = size
	this.Total = total
	this.Items = items
	return &this
}

// NewConsumerListWithDefaults instantiates a new ConsumerList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerListWithDefaults() *ConsumerList {
	this := ConsumerList{}
	return &this
}

// GetKind returns the Kind field value
func (o *ConsumerList) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ConsumerList) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ConsumerList) SetKind(v string) {
	o.Kind = v
}

// GetPage returns the Page field value
func (o *ConsumerList) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *ConsumerList) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *ConsumerList) SetPage(v int32) {
	o.Page = v
}

// GetSize returns the Size field value
func (o *ConsumerList) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ConsumerList) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ConsumerList) SetSize(v int32) {
	o.Size = v
}

// GetTotal returns the Total field value
func (o *ConsumerList) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ConsumerList) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ConsumerList) SetTotal(v int32) {
	o.Total = v
}

// GetItems returns the Items field value
func (o *ConsumerList) GetItems() []Consumer {
	if o == nil {
		var ret []Consumer
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ConsumerList) GetItemsOk() ([]Consumer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ConsumerList) SetItems(v []Consumer) {
	o.Items = v
}

func (o ConsumerList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsumerList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["page"] = o.Page
	toSerialize["size"] = o.Size
	toSerialize["total"] = o.Total
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

type NullableConsumerList struct {
	value *ConsumerList
	isSet bool
}

func (v NullableConsumerList) Get() *ConsumerList {
	return v.value
}

func (v *NullableConsumerList) Set(val *ConsumerList) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerList) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerList(val *ConsumerList) *NullableConsumerList {
	return &NullableConsumerList{value: val, isSet: true}
}

func (v NullableConsumerList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
